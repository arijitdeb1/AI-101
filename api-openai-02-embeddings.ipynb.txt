{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "S801rKw4JZHN"
   },
   "outputs": [],
   "source": [
    "%pip install --upgrade openai\n",
    "%pip install pandas\n",
    "%pip install numpy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "lh3tIWnELkR3"
   },
   "outputs": [],
   "source": [
    "%env OPENAI_API_KEY=----add your api key-------"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "sC6T8o3CKf-7"
   },
   "outputs": [],
   "source": [
    "#pandas - fast, powerful, flexible and easy to use open source data analysis and manipulation tool\n",
    "import pandas as pd\n",
    "\n",
    "sentences = pd.Series([\n",
    "    'The book I read was very interesting.',\n",
    "    'Cooking can be a relaxing hobby.',\n",
    "    'The scent of flowers filled the air.',\n",
    "    'She wore a dress that sparkled under the lights.',\n",
    "    'His determination was evident in his eyes.',\n",
    "    'The city skyline looked magnificent during sunset.',\n",
    "    'Music has a way of transcending boundaries.',\n",
    "    'The old tree stood tall, bearing witness to centuries gone by.',\n",
    "    'Traveling opens up new perspectives and experiences.',\n",
    "    'The artist poured his emotions into the canvas.'\n",
    "])\n",
    "\n",
    "#DataFrame - 2 dimensional data structure, like a 2 dimensional array, or a table with rows and columns\n",
    "df=pd.DataFrame({ 'text': sentences })\n",
    "\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "9k-S5uHRKnem"
   },
   "outputs": [],
   "source": [
    "from openai import OpenAI\n",
    "client = OpenAI()\n",
    "\n",
    "\n",
    "def determine_text_embedding(text, model=\"text-embedding-ada-002\"):\n",
    "    return [client.embeddings.create(input = [text], model=model).data[0].embedding]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "iMgq3qjZLc7_"
   },
   "outputs": [],
   "source": [
    "determine_text_embedding(\"An example Sentence\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "YdGbx-DLMFJF"
   },
   "outputs": [],
   "source": [
    "df=df.assign(\n",
    "    embedding=(\n",
    "        df[\"text\"].apply(lambda x : determine_text_embedding(x))\n",
    "    )\n",
    ")\n",
    "\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "H9LFewoVMRO-"
   },
   "outputs": [],
   "source": [
    "prompt = \"Tell me about Cooking\"\n",
    "prompt_embedding=determine_text_embedding(prompt)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "U_Z3XvWjMWSU"
   },
   "outputs": [],
   "source": [
    "#numpy - support for large, multi-dimensional arrays and matrices,\n",
    "#        along with a large collection of high-level mathematical functions to operate on these arrays.\n",
    "import numpy as np\n",
    "\n",
    "# Calculate dot product to find out similarity\n",
    "# Higher dot product => similar vectors\n",
    "def determine_embedding_similarity(vec1, vec2):\n",
    "    return np.dot(np.squeeze(np.array(vec1)),np.squeeze(np.array(vec2)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "H5Egx8IoMcdr"
   },
   "outputs": [],
   "source": [
    "df[\"similarity\"]=df[\"embedding\"].apply(lambda x: determine_embedding_similarity(x,prompt_embedding[0]))\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "sX4WusprMjAg"
   },
   "outputs": [],
   "source": [
    "index_of_highest_similarity = df['similarity'].idxmax()\n",
    "text_with_highest_similarity = df.loc[index_of_highest_similarity, 'text']\n",
    "text_with_highest_similarity"
   ]
  }
 ],
 "metadata": {
  "colab": {
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
